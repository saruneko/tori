/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c AccountProxy -p client/account_proxy.h:client/account_proxy.cpp org.saruneko.tori.account.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ACCOUNT_PROXY_H_1359220119
#define ACCOUNT_PROXY_H_1359220119

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.saruneko.tori.Account
 */
class AccountProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.saruneko.tori.Account"; }

public:
    AccountProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~AccountProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> authenticate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("authenticate"), argumentList);
    }

    inline QDBusPendingReply<> destroy(const QString &uuid, qlonglong tweet_id, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(tweet_id) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("destroy"), argumentList);
    }

    inline QDBusPendingReply<> retweet(const QString &uuid, qlonglong tweet_id, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(tweet_id) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("retweet"), argumentList);
    }

    inline QDBusPendingReply<> retweets(const QString &uuid, qlonglong tweet_id, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(tweet_id) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("retweets"), argumentList);
    }

    inline QDBusPendingReply<> show(const QString &uuid, qlonglong tweet_id, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(tweet_id) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("show"), argumentList);
    }

    inline QDBusPendingReply<> update(const QString &uuid, const QString &status, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(status) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QLatin1String("update"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void authenticated();
    void authenticationError(uint errorCode, const QString &error);
};

namespace com {
  namespace saruneko {
    namespace tori {
      typedef ::AccountProxy Account;
    }
  }
}
#endif

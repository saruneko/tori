/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c ItemInterface -p keyring/item.h:keyring/item.cpp -i secret.h org.freedesktop.secret.item.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ITEM_H_1355187876
#define ITEM_H_1355187876

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "secret.h"

/*
 * Proxy class for interface org.freedesktop.Secret.Item
 */
class ItemInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Secret.Item"; }

public:
    ItemInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ItemInterface();

    Q_PROPERTY( DBusStringHash Attributes READ attributes WRITE setAttributes)
    inline  DBusStringHash attributes() const
    { return qvariant_cast<  DBusStringHash >(property("Attributes")); }
    inline void setAttributes( DBusStringHash value)
    { setProperty("Attributes", QVariant::fromValue(value)); }

    Q_PROPERTY(qulonglong Created READ created)
    inline qulonglong created() const
    { return qvariant_cast< qulonglong >(property("Created")); }

    Q_PROPERTY(QString Label READ label WRITE setLabel)
    inline QString label() const
    { return qvariant_cast< QString >(property("Label")); }
    inline void setLabel(const QString &value)
    { setProperty("Label", QVariant::fromValue(value)); }

    Q_PROPERTY(bool Locked READ locked)
    inline bool locked() const
    { return qvariant_cast< bool >(property("Locked")); }

    Q_PROPERTY(qulonglong Modified READ modified)
    inline qulonglong modified() const
    { return qvariant_cast< qulonglong >(property("Modified")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> Delete()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Delete"), argumentList);
    }

    inline QDBusPendingReply<Secret> GetSecret(const QDBusObjectPath &session)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(session);
        return asyncCallWithArgumentList(QLatin1String("GetSecret"), argumentList);
    }

    inline QDBusPendingReply<> SetSecret(Secret secret)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(secret);
        return asyncCallWithArgumentList(QLatin1String("SetSecret"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace freedesktop {
    namespace Secret {
      typedef ::ItemInterface Item;
    }
  }
}
#endif

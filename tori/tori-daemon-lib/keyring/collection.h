/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c CollectionInterface -p keyring/collection.h:keyring/collection.cpp -i secret.h org.freedesktop.secret.collection.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COLLECTION_H_1355187876
#define COLLECTION_H_1355187876

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "secret.h"

/*
 * Proxy class for interface org.freedesktop.Secret.Collection
 */
class CollectionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Secret.Collection"; }

public:
    CollectionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CollectionInterface();

    Q_PROPERTY(qulonglong Created READ created)
    inline qulonglong created() const
    { return qvariant_cast< qulonglong >(property("Created")); }

    Q_PROPERTY(QList<QDBusObjectPath> Items READ items)
    inline QList<QDBusObjectPath> items() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Items")); }

    Q_PROPERTY(QString Label READ label WRITE setLabel)
    inline QString label() const
    { return qvariant_cast< QString >(property("Label")); }
    inline void setLabel(const QString &value)
    { setProperty("Label", QVariant::fromValue(value)); }

    Q_PROPERTY(bool Locked READ locked)
    inline bool locked() const
    { return qvariant_cast< bool >(property("Locked")); }

    Q_PROPERTY(qulonglong Modified READ modified)
    inline qulonglong modified() const
    { return qvariant_cast< qulonglong >(property("Modified")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath, QDBusObjectPath> CreateItem(const QVariantMap &properties, Secret secret, bool replace)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties) << QVariant::fromValue(secret) << QVariant::fromValue(replace);
        return asyncCallWithArgumentList(QLatin1String("CreateItem"), argumentList);
    }
    inline QDBusReply<QDBusObjectPath> CreateItem(const QVariantMap &properties, Secret secret, bool replace, QDBusObjectPath &prompt)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties) << QVariant::fromValue(secret) << QVariant::fromValue(replace);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("CreateItem"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            prompt = qdbus_cast<QDBusObjectPath>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QDBusObjectPath> Delete()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Delete"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > SearchItems(const QHash<QString, QString> &attributes)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(attributes);
        return asyncCallWithArgumentList(QLatin1String("SearchItems"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ItemChanged(const QDBusObjectPath &item);
    void ItemCreated(const QDBusObjectPath &item);
    void ItemDeleted(const QDBusObjectPath &item);
};

namespace org {
  namespace freedesktop {
    namespace Secret {
      typedef ::CollectionInterface Collection;
    }
  }
}
#endif
